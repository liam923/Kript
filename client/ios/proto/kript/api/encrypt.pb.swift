// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kript/api/encrypt.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Kript_Api_Secret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var secret: Kript_Api_Secret.OneOf_Secret? = nil

  var password: Kript_Api_Secret.Password {
    get {
      if case .password(let v)? = secret {return v}
      return Kript_Api_Secret.Password()
    }
    set {secret = .password(newValue)}
  }

  var code: Kript_Api_Secret.Code {
    get {
      if case .code(let v)? = secret {return v}
      return Kript_Api_Secret.Code()
    }
    set {secret = .code(newValue)}
  }

  var note: Kript_Api_Secret.Note {
    get {
      if case .note(let v)? = secret {return v}
      return Kript_Api_Secret.Note()
    }
    set {secret = .note(newValue)}
  }

  var creditCard: Kript_Api_Secret.CreditCard {
    get {
      if case .creditCard(let v)? = secret {return v}
      return Kript_Api_Secret.CreditCard()
    }
    set {secret = .creditCard(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Secret: Equatable {
    case password(Kript_Api_Secret.Password)
    case code(Kript_Api_Secret.Code)
    case note(Kript_Api_Secret.Note)
    case creditCard(Kript_Api_Secret.CreditCard)

  #if !swift(>=4.1)
    static func ==(lhs: Kript_Api_Secret.OneOf_Secret, rhs: Kript_Api_Secret.OneOf_Secret) -> Bool {
      switch (lhs, rhs) {
      case (.password(let l), .password(let r)): return l == r
      case (.code(let l), .code(let r)): return l == r
      case (.note(let l), .note(let r)): return l == r
      case (.creditCard(let l), .creditCard(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct Password {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var url: String = String()

    var password: String = String()

    var username: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Code {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: String = String()

    var type: Kript_Api_Secret.Code.TypeEnum = .unknownCodeType

    var description_p: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TypeEnum: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknownCodeType // = 0
      case bankAccountNumber // = 1
      case socialSecurityNumber // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknownCodeType
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknownCodeType
        case 1: self = .bankAccountNumber
        case 2: self = .socialSecurityNumber
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknownCodeType: return 0
        case .bankAccountNumber: return 1
        case .socialSecurityNumber: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  struct Note {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var text: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CreditCard {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var number: String = String()

    var name: String = String()

    var expirationMonth: UInt32 = 0

    var expirationYear: UInt32 = 0

    var description_p: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension Kript_Api_Secret.Code.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Kript_Api_Secret.Code.TypeEnum] = [
    .unknownCodeType,
    .bankAccountNumber,
    .socialSecurityNumber,
  ]
}

#endif  // swift(>=4.2)

/// A Secret object that has been encrypted.
struct Kript_Api_ESecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Secret object ecnrypted, using protobuf encoding.
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A byte string that has been encrypted.
struct Kript_Api_EBytes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The byte string encrypted.
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A string that has been hashed.
struct Kript_Api_HString {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The string hashed, using utf-8 encoding.
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kript.api"

extension Kript_Api_Secret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Secret"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
    2: .same(proto: "code"),
    3: .same(proto: "note"),
    4: .standard(proto: "credit_card"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Kript_Api_Secret.Password?
        if let current = self.secret {
          try decoder.handleConflictingOneOf()
          if case .password(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.secret = .password(v)}
      case 2:
        var v: Kript_Api_Secret.Code?
        if let current = self.secret {
          try decoder.handleConflictingOneOf()
          if case .code(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.secret = .code(v)}
      case 3:
        var v: Kript_Api_Secret.Note?
        if let current = self.secret {
          try decoder.handleConflictingOneOf()
          if case .note(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.secret = .note(v)}
      case 4:
        var v: Kript_Api_Secret.CreditCard?
        if let current = self.secret {
          try decoder.handleConflictingOneOf()
          if case .creditCard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.secret = .creditCard(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.secret {
    case .password(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .code(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .note(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .creditCard(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_Secret, rhs: Kript_Api_Secret) -> Bool {
    if lhs.secret != rhs.secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_Secret.Password: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kript_Api_Secret.protoMessageName + ".Password"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "password"),
    3: .same(proto: "username"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      case 3: try decoder.decodeSingularStringField(value: &self.username)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_Secret.Password, rhs: Kript_Api_Secret.Password) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.password != rhs.password {return false}
    if lhs.username != rhs.username {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_Secret.Code: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kript_Api_Secret.protoMessageName + ".Code"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "type"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if self.type != .unknownCodeType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_Secret.Code, rhs: Kript_Api_Secret.Code) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.type != rhs.type {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_Secret.Code.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CODE_TYPE"),
    1: .same(proto: "BANK_ACCOUNT_NUMBER"),
    2: .same(proto: "SOCIAL_SECURITY_NUMBER"),
  ]
}

extension Kript_Api_Secret.Note: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kript_Api_Secret.protoMessageName + ".Note"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_Secret.Note, rhs: Kript_Api_Secret.Note) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_Secret.CreditCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kript_Api_Secret.protoMessageName + ".CreditCard"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "name"),
    3: .standard(proto: "expiration_month"),
    4: .standard(proto: "expiration_year"),
    5: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.number)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.expirationMonth)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.expirationYear)
      case 5: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.expirationMonth != 0 {
      try visitor.visitSingularUInt32Field(value: self.expirationMonth, fieldNumber: 3)
    }
    if self.expirationYear != 0 {
      try visitor.visitSingularUInt32Field(value: self.expirationYear, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_Secret.CreditCard, rhs: Kript_Api_Secret.CreditCard) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.name != rhs.name {return false}
    if lhs.expirationMonth != rhs.expirationMonth {return false}
    if lhs.expirationYear != rhs.expirationYear {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_ESecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ESecret"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_ESecret, rhs: Kript_Api_ESecret) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_EBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EBytes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_EBytes, rhs: Kript_Api_EBytes) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kript_Api_HString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HString"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kript_Api_HString, rhs: Kript_Api_HString) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
