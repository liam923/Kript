// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kript/api/universal.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// An enumeration of different password hashing algorithms.
type HashAlgorithm int32

const (
	HashAlgorithm_UNKNOWN_HASH_ALGORITHM HashAlgorithm = 0
	// Concatenate password + salt and use SHA-512.
	HashAlgorithm_SHA_512 HashAlgorithm = 1
)

var HashAlgorithm_name = map[int32]string{
	0: "UNKNOWN_HASH_ALGORITHM",
	1: "SHA_512",
}

var HashAlgorithm_value = map[string]int32{
	"UNKNOWN_HASH_ALGORITHM": 0,
	"SHA_512":                1,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}

func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f55c2955aa4afcfe, []int{0}
}

// An enumeration of different symmetric encryption algorithms.
type SEncryptionAlgorithm int32

const (
	SEncryptionAlgorithm_UNKNOWN_S_ENCRYPTION_ALGORITHM SEncryptionAlgorithm = 0
	// Encrypt using AES with a given key.
	SEncryptionAlgorithm_AES SEncryptionAlgorithm = 1
)

var SEncryptionAlgorithm_name = map[int32]string{
	0: "UNKNOWN_S_ENCRYPTION_ALGORITHM",
	1: "AES",
}

var SEncryptionAlgorithm_value = map[string]int32{
	"UNKNOWN_S_ENCRYPTION_ALGORITHM": 0,
	"AES":                            1,
}

func (x SEncryptionAlgorithm) String() string {
	return proto.EnumName(SEncryptionAlgorithm_name, int32(x))
}

func (SEncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f55c2955aa4afcfe, []int{1}
}

// An enumeration of different asymmetric encryption algorithms.
type AEncryptionAlgorithm int32

const (
	AEncryptionAlgorithm_UNKNOWN_A_ENCRYPTION_ALGORITHM AEncryptionAlgorithm = 0
	// Encrypt using AES with a given key.
	AEncryptionAlgorithm_RSA AEncryptionAlgorithm = 1
)

var AEncryptionAlgorithm_name = map[int32]string{
	0: "UNKNOWN_A_ENCRYPTION_ALGORITHM",
	1: "RSA",
}

var AEncryptionAlgorithm_value = map[string]int32{
	"UNKNOWN_A_ENCRYPTION_ALGORITHM": 0,
	"RSA":                            1,
}

func (x AEncryptionAlgorithm) String() string {
	return proto.EnumName(AEncryptionAlgorithm_name, int32(x))
}

func (AEncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f55c2955aa4afcfe, []int{2}
}

type AccessToken struct {
	Jwt                  *JWT     `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessToken) Reset()         { *m = AccessToken{} }
func (m *AccessToken) String() string { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()    {}
func (*AccessToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55c2955aa4afcfe, []int{0}
}
func (m *AccessToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessToken.Unmarshal(m, b)
}
func (m *AccessToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessToken.Marshal(b, m, deterministic)
}
func (m *AccessToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessToken.Merge(m, src)
}
func (m *AccessToken) XXX_Size() int {
	return xxx_messageInfo_AccessToken.Size(m)
}
func (m *AccessToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessToken.DiscardUnknown(m)
}

var xxx_messageInfo_AccessToken proto.InternalMessageInfo

func (m *AccessToken) GetJwt() *JWT {
	if m != nil {
		return m.Jwt
	}
	return nil
}

// A representation of a JSON Web Token.
type JWT struct {
	// The Base 64 encoded JWT.
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWT) Reset()         { *m = JWT{} }
func (m *JWT) String() string { return proto.CompactTextString(m) }
func (*JWT) ProtoMessage()    {}
func (*JWT) Descriptor() ([]byte, []int) {
	return fileDescriptor_f55c2955aa4afcfe, []int{1}
}
func (m *JWT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWT.Unmarshal(m, b)
}
func (m *JWT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWT.Marshal(b, m, deterministic)
}
func (m *JWT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWT.Merge(m, src)
}
func (m *JWT) XXX_Size() int {
	return xxx_messageInfo_JWT.Size(m)
}
func (m *JWT) XXX_DiscardUnknown() {
	xxx_messageInfo_JWT.DiscardUnknown(m)
}

var xxx_messageInfo_JWT proto.InternalMessageInfo

func (m *JWT) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterEnum("kript.api.HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
	proto.RegisterEnum("kript.api.SEncryptionAlgorithm", SEncryptionAlgorithm_name, SEncryptionAlgorithm_value)
	proto.RegisterEnum("kript.api.AEncryptionAlgorithm", AEncryptionAlgorithm_name, AEncryptionAlgorithm_value)
	proto.RegisterType((*AccessToken)(nil), "kript.api.AccessToken")
	proto.RegisterType((*JWT)(nil), "kript.api.JWT")
}

func init() { proto.RegisterFile("kript/api/universal.proto", fileDescriptor_f55c2955aa4afcfe) }

var fileDescriptor_f55c2955aa4afcfe = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd0, 0xcd, 0x4b, 0xc3, 0x30,
	0x18, 0x06, 0x70, 0x4b, 0xd1, 0xb1, 0xb7, 0x28, 0xa5, 0x0c, 0xf1, 0x03, 0x64, 0xf4, 0x24, 0x3b,
	0x34, 0xd8, 0x32, 0xd0, 0x63, 0x1c, 0xc5, 0x6e, 0xd3, 0x56, 0x9a, 0x4a, 0xd1, 0x4b, 0xe9, 0x4a,
	0x69, 0x63, 0x3f, 0x12, 0xd2, 0x6c, 0xe2, 0x7f, 0x2f, 0xeb, 0x70, 0xe2, 0x45, 0x8f, 0xc9, 0xf3,
	0xbc, 0xbf, 0xc3, 0x03, 0xe7, 0x95, 0xa0, 0x5c, 0xa2, 0x94, 0x53, 0xb4, 0x6e, 0xe9, 0x26, 0x17,
	0x5d, 0x5a, 0x5b, 0x5c, 0x30, 0xc9, 0x8c, 0x61, 0x1f, 0x59, 0x29, 0xa7, 0x26, 0x02, 0x0d, 0x67,
	0x59, 0xde, 0x75, 0x11, 0xab, 0xf2, 0xd6, 0x18, 0x83, 0xfa, 0xfe, 0x21, 0xcf, 0x94, 0xb1, 0x72,
	0xad, 0xd9, 0x27, 0xd6, 0xbe, 0x67, 0x2d, 0xe2, 0x28, 0xdc, 0x46, 0xe6, 0x25, 0xa8, 0x8b, 0x38,
	0x32, 0x46, 0x70, 0x28, 0xb7, 0x17, 0x7d, 0x75, 0x18, 0xee, 0x1e, 0x93, 0x5b, 0x38, 0xf6, 0xd2,
	0xae, 0xc4, 0x75, 0xc1, 0x04, 0x95, 0x65, 0x63, 0x5c, 0xc0, 0xe9, 0x8b, 0xbf, 0xf4, 0x83, 0xd8,
	0x4f, 0x3c, 0x4c, 0xbc, 0x04, 0x3f, 0x3e, 0x04, 0xe1, 0x3c, 0xf2, 0x9e, 0xf4, 0x03, 0x43, 0x83,
	0x01, 0xf1, 0x70, 0x32, 0xbd, 0xb1, 0x75, 0x65, 0x32, 0x83, 0x11, 0x71, 0xdb, 0x4c, 0x7c, 0x72,
	0x49, 0x59, 0xfb, 0x03, 0x98, 0x70, 0xf5, 0x0d, 0x90, 0xc4, 0xf5, 0x67, 0xe1, 0xeb, 0x73, 0x34,
	0x0f, 0xfc, 0x5f, 0xd0, 0x00, 0x54, 0xec, 0x92, 0x1d, 0x82, 0xff, 0x41, 0xf0, 0x1f, 0x48, 0x48,
	0xb0, 0xae, 0xdc, 0x4f, 0xdf, 0x9c, 0x82, 0xca, 0x72, 0xbd, 0xb2, 0x32, 0xd6, 0xa0, 0x9a, 0xa6,
	0xcd, 0x9d, 0xed, 0xa0, 0x65, 0x3f, 0x66, 0x97, 0x8b, 0x4d, 0x2e, 0x10, 0xaf, 0x0a, 0xd4, 0x2f,
	0x89, 0xf6, 0x1b, 0xaf, 0x8e, 0xfa, 0x0f, 0xe7, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x0b, 0xbc,
	0x81, 0x77, 0x01, 0x00, 0x00,
}
